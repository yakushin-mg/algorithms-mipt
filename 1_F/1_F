/*Найти k-ю порядковую статистику последовательности
1 ≤ k_index ≤ number ≤ 107
0 ≤ sequence[i] < 107 + 4321)*/

#include <cmath>
#include <iostream>
#include <vector>
using std::vector;
int Partition(vector<int>& sequence, vector<int>& extra, int start, int end,
              int k_index) {
  if (start < end - 1) {
    int pivot = sequence[(start + end) / 2];
    int index_extra = start;
    int less_count = 0;
    for (int i = start; i < end; i++) {
      if (sequence[i] < pivot) {
        extra[index_extra++] = sequence[i];
        less_count += 1;
      }
    }
    int equal_count = 0;
    for (int i = start; i < end; i++) {
      if (sequence[i] == pivot) {
        extra[index_extra++] = sequence[i];
        equal_count += 1;
      }
    }
    int bigger_count = 0;
    for (int i = start; i < end; i++) {
      if (sequence[i] > pivot) {
        extra[index_extra++] = sequence[i];
        bigger_count += 1;
      }
    }
    for (int i = start; i < end; i++) {
      sequence[i] = extra[i];
    }
    if (k_index <= less_count) {
      return Partition(sequence, extra, start, end - equal_count - bigger_count,
                       k_index);
    }
    if (less_count < k_index && k_index <= less_count + equal_count) {
      return pivot;
    }
    return Partition(sequence, extra, end - bigger_count, end,
                     k_index - less_count - equal_count);
  }
  return sequence[start];
}
int main() {
  int number;
  int k_index;
  int first;
  int second;
  std::cin >> number >> k_index >> first >> second;
  vector<int> sequence(number);
  sequence[0] = first;
  sequence[1] = second;
  const int kMagicNumber1 = 123;
  const int kMagicNumber2 = 45;
  const int kMagicNumber3 = pow(10, 7) + 4321;
  for (int i = 2; i < number; i++) {
    sequence[i] =
        (sequence[i - 1] * kMagicNumber1 + sequence[i - 2] * kMagicNumber2) %
        (kMagicNumber3);
  }
  vector<int> extra(number);
  int value_k = Partition(sequence, extra, 0, number, k_index);
  std::cout << value_k;
}
